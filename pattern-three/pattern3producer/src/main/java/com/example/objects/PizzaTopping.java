/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.objects;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PizzaTopping extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5860957348859679316L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PizzaTopping\",\"namespace\":\"com.example.objects\",\"fields\":[{\"name\":\"pizza\",\"type\":\"string\",\"doc\":\"Identifier of the pizza\"},{\"name\":\"part\",\"type\":\"string\",\"doc\":\"Part of the pizza this relates to\"},{\"name\":\"kind\",\"type\":\"string\",\"doc\":\"Kind of pizza topping\"},{\"name\":\"amount\",\"type\":\"string\",\"doc\":\"Amount of the pizza topping\"},{\"name\":\"dsitribution\",\"type\":\"string\",\"doc\":\"How much of the pizza to cover with the pizza topping\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PizzaTopping> ENCODER =
      new BinaryMessageEncoder<PizzaTopping>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PizzaTopping> DECODER =
      new BinaryMessageDecoder<PizzaTopping>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PizzaTopping> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PizzaTopping> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PizzaTopping> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PizzaTopping>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PizzaTopping to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PizzaTopping from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PizzaTopping instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PizzaTopping fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Identifier of the pizza */
  private java.lang.CharSequence pizza;
  /** Part of the pizza this relates to */
  private java.lang.CharSequence part;
  /** Kind of pizza topping */
  private java.lang.CharSequence kind;
  /** Amount of the pizza topping */
  private java.lang.CharSequence amount;
  /** How much of the pizza to cover with the pizza topping */
  private java.lang.CharSequence dsitribution;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PizzaTopping() {}

  /**
   * All-args constructor.
   * @param pizza Identifier of the pizza
   * @param part Part of the pizza this relates to
   * @param kind Kind of pizza topping
   * @param amount Amount of the pizza topping
   * @param dsitribution How much of the pizza to cover with the pizza topping
   */
  public PizzaTopping(java.lang.CharSequence pizza, java.lang.CharSequence part, java.lang.CharSequence kind, java.lang.CharSequence amount, java.lang.CharSequence dsitribution) {
    this.pizza = pizza;
    this.part = part;
    this.kind = kind;
    this.amount = amount;
    this.dsitribution = dsitribution;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pizza;
    case 1: return part;
    case 2: return kind;
    case 3: return amount;
    case 4: return dsitribution;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pizza = (java.lang.CharSequence)value$; break;
    case 1: part = (java.lang.CharSequence)value$; break;
    case 2: kind = (java.lang.CharSequence)value$; break;
    case 3: amount = (java.lang.CharSequence)value$; break;
    case 4: dsitribution = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'pizza' field.
   * @return Identifier of the pizza
   */
  public java.lang.CharSequence getPizza() {
    return pizza;
  }


  /**
   * Sets the value of the 'pizza' field.
   * Identifier of the pizza
   * @param value the value to set.
   */
  public void setPizza(java.lang.CharSequence value) {
    this.pizza = value;
  }

  /**
   * Gets the value of the 'part' field.
   * @return Part of the pizza this relates to
   */
  public java.lang.CharSequence getPart() {
    return part;
  }


  /**
   * Sets the value of the 'part' field.
   * Part of the pizza this relates to
   * @param value the value to set.
   */
  public void setPart(java.lang.CharSequence value) {
    this.part = value;
  }

  /**
   * Gets the value of the 'kind' field.
   * @return Kind of pizza topping
   */
  public java.lang.CharSequence getKind() {
    return kind;
  }


  /**
   * Sets the value of the 'kind' field.
   * Kind of pizza topping
   * @param value the value to set.
   */
  public void setKind(java.lang.CharSequence value) {
    this.kind = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return Amount of the pizza topping
   */
  public java.lang.CharSequence getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * Amount of the pizza topping
   * @param value the value to set.
   */
  public void setAmount(java.lang.CharSequence value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'dsitribution' field.
   * @return How much of the pizza to cover with the pizza topping
   */
  public java.lang.CharSequence getDsitribution() {
    return dsitribution;
  }


  /**
   * Sets the value of the 'dsitribution' field.
   * How much of the pizza to cover with the pizza topping
   * @param value the value to set.
   */
  public void setDsitribution(java.lang.CharSequence value) {
    this.dsitribution = value;
  }

  /**
   * Creates a new PizzaTopping RecordBuilder.
   * @return A new PizzaTopping RecordBuilder
   */
  public static com.example.objects.PizzaTopping.Builder newBuilder() {
    return new com.example.objects.PizzaTopping.Builder();
  }

  /**
   * Creates a new PizzaTopping RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PizzaTopping RecordBuilder
   */
  public static com.example.objects.PizzaTopping.Builder newBuilder(com.example.objects.PizzaTopping.Builder other) {
    if (other == null) {
      return new com.example.objects.PizzaTopping.Builder();
    } else {
      return new com.example.objects.PizzaTopping.Builder(other);
    }
  }

  /**
   * Creates a new PizzaTopping RecordBuilder by copying an existing PizzaTopping instance.
   * @param other The existing instance to copy.
   * @return A new PizzaTopping RecordBuilder
   */
  public static com.example.objects.PizzaTopping.Builder newBuilder(com.example.objects.PizzaTopping other) {
    if (other == null) {
      return new com.example.objects.PizzaTopping.Builder();
    } else {
      return new com.example.objects.PizzaTopping.Builder(other);
    }
  }

  /**
   * RecordBuilder for PizzaTopping instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PizzaTopping>
    implements org.apache.avro.data.RecordBuilder<PizzaTopping> {

    /** Identifier of the pizza */
    private java.lang.CharSequence pizza;
    /** Part of the pizza this relates to */
    private java.lang.CharSequence part;
    /** Kind of pizza topping */
    private java.lang.CharSequence kind;
    /** Amount of the pizza topping */
    private java.lang.CharSequence amount;
    /** How much of the pizza to cover with the pizza topping */
    private java.lang.CharSequence dsitribution;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.objects.PizzaTopping.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pizza)) {
        this.pizza = data().deepCopy(fields()[0].schema(), other.pizza);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.part)) {
        this.part = data().deepCopy(fields()[1].schema(), other.part);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.kind)) {
        this.kind = data().deepCopy(fields()[2].schema(), other.kind);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dsitribution)) {
        this.dsitribution = data().deepCopy(fields()[4].schema(), other.dsitribution);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing PizzaTopping instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.objects.PizzaTopping other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.pizza)) {
        this.pizza = data().deepCopy(fields()[0].schema(), other.pizza);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.part)) {
        this.part = data().deepCopy(fields()[1].schema(), other.part);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.kind)) {
        this.kind = data().deepCopy(fields()[2].schema(), other.kind);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dsitribution)) {
        this.dsitribution = data().deepCopy(fields()[4].schema(), other.dsitribution);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'pizza' field.
      * Identifier of the pizza
      * @return The value.
      */
    public java.lang.CharSequence getPizza() {
      return pizza;
    }


    /**
      * Sets the value of the 'pizza' field.
      * Identifier of the pizza
      * @param value The value of 'pizza'.
      * @return This builder.
      */
    public com.example.objects.PizzaTopping.Builder setPizza(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.pizza = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'pizza' field has been set.
      * Identifier of the pizza
      * @return True if the 'pizza' field has been set, false otherwise.
      */
    public boolean hasPizza() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'pizza' field.
      * Identifier of the pizza
      * @return This builder.
      */
    public com.example.objects.PizzaTopping.Builder clearPizza() {
      pizza = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'part' field.
      * Part of the pizza this relates to
      * @return The value.
      */
    public java.lang.CharSequence getPart() {
      return part;
    }


    /**
      * Sets the value of the 'part' field.
      * Part of the pizza this relates to
      * @param value The value of 'part'.
      * @return This builder.
      */
    public com.example.objects.PizzaTopping.Builder setPart(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.part = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'part' field has been set.
      * Part of the pizza this relates to
      * @return True if the 'part' field has been set, false otherwise.
      */
    public boolean hasPart() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'part' field.
      * Part of the pizza this relates to
      * @return This builder.
      */
    public com.example.objects.PizzaTopping.Builder clearPart() {
      part = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'kind' field.
      * Kind of pizza topping
      * @return The value.
      */
    public java.lang.CharSequence getKind() {
      return kind;
    }


    /**
      * Sets the value of the 'kind' field.
      * Kind of pizza topping
      * @param value The value of 'kind'.
      * @return This builder.
      */
    public com.example.objects.PizzaTopping.Builder setKind(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.kind = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'kind' field has been set.
      * Kind of pizza topping
      * @return True if the 'kind' field has been set, false otherwise.
      */
    public boolean hasKind() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'kind' field.
      * Kind of pizza topping
      * @return This builder.
      */
    public com.example.objects.PizzaTopping.Builder clearKind() {
      kind = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Amount of the pizza topping
      * @return The value.
      */
    public java.lang.CharSequence getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * Amount of the pizza topping
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.example.objects.PizzaTopping.Builder setAmount(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Amount of the pizza topping
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * Amount of the pizza topping
      * @return This builder.
      */
    public com.example.objects.PizzaTopping.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dsitribution' field.
      * How much of the pizza to cover with the pizza topping
      * @return The value.
      */
    public java.lang.CharSequence getDsitribution() {
      return dsitribution;
    }


    /**
      * Sets the value of the 'dsitribution' field.
      * How much of the pizza to cover with the pizza topping
      * @param value The value of 'dsitribution'.
      * @return This builder.
      */
    public com.example.objects.PizzaTopping.Builder setDsitribution(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.dsitribution = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dsitribution' field has been set.
      * How much of the pizza to cover with the pizza topping
      * @return True if the 'dsitribution' field has been set, false otherwise.
      */
    public boolean hasDsitribution() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dsitribution' field.
      * How much of the pizza to cover with the pizza topping
      * @return This builder.
      */
    public com.example.objects.PizzaTopping.Builder clearDsitribution() {
      dsitribution = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PizzaTopping build() {
      try {
        PizzaTopping record = new PizzaTopping();
        record.pizza = fieldSetFlags()[0] ? this.pizza : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.part = fieldSetFlags()[1] ? this.part : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.kind = fieldSetFlags()[2] ? this.kind : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.dsitribution = fieldSetFlags()[4] ? this.dsitribution : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PizzaTopping>
    WRITER$ = (org.apache.avro.io.DatumWriter<PizzaTopping>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PizzaTopping>
    READER$ = (org.apache.avro.io.DatumReader<PizzaTopping>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.pizza);

    out.writeString(this.part);

    out.writeString(this.kind);

    out.writeString(this.amount);

    out.writeString(this.dsitribution);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.pizza = in.readString(this.pizza instanceof Utf8 ? (Utf8)this.pizza : null);

      this.part = in.readString(this.part instanceof Utf8 ? (Utf8)this.part : null);

      this.kind = in.readString(this.kind instanceof Utf8 ? (Utf8)this.kind : null);

      this.amount = in.readString(this.amount instanceof Utf8 ? (Utf8)this.amount : null);

      this.dsitribution = in.readString(this.dsitribution instanceof Utf8 ? (Utf8)this.dsitribution : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.pizza = in.readString(this.pizza instanceof Utf8 ? (Utf8)this.pizza : null);
          break;

        case 1:
          this.part = in.readString(this.part instanceof Utf8 ? (Utf8)this.part : null);
          break;

        case 2:
          this.kind = in.readString(this.kind instanceof Utf8 ? (Utf8)this.kind : null);
          break;

        case 3:
          this.amount = in.readString(this.amount instanceof Utf8 ? (Utf8)this.amount : null);
          break;

        case 4:
          this.dsitribution = in.readString(this.dsitribution instanceof Utf8 ? (Utf8)this.dsitribution : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










