/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.objects;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RetryableError extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3288922086086117110L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RetryableError\",\"namespace\":\"com.example.objects\",\"fields\":[{\"name\":\"exception\",\"type\":\"string\",\"doc\":\"Exception caught during call execution\"},{\"name\":\"message\",\"type\":\"string\",\"doc\":\"Description of the failure\"},{\"name\":\"object\",\"type\":\"string\",\"doc\":\"Classname of the original event\"},{\"name\":\"content\",\"type\":\"string\",\"doc\":\"Stringified content of original event\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RetryableError> ENCODER =
      new BinaryMessageEncoder<RetryableError>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RetryableError> DECODER =
      new BinaryMessageDecoder<RetryableError>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RetryableError> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RetryableError> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RetryableError> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RetryableError>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RetryableError to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RetryableError from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RetryableError instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RetryableError fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Exception caught during call execution */
  private java.lang.CharSequence exception;
  /** Description of the failure */
  private java.lang.CharSequence message;
  /** Classname of the original event */
  private java.lang.CharSequence object;
  /** Stringified content of original event */
  private java.lang.CharSequence content;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RetryableError() {}

  /**
   * All-args constructor.
   * @param exception Exception caught during call execution
   * @param message Description of the failure
   * @param object Classname of the original event
   * @param content Stringified content of original event
   */
  public RetryableError(java.lang.CharSequence exception, java.lang.CharSequence message, java.lang.CharSequence object, java.lang.CharSequence content) {
    this.exception = exception;
    this.message = message;
    this.object = object;
    this.content = content;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return exception;
    case 1: return message;
    case 2: return object;
    case 3: return content;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: exception = (java.lang.CharSequence)value$; break;
    case 1: message = (java.lang.CharSequence)value$; break;
    case 2: object = (java.lang.CharSequence)value$; break;
    case 3: content = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'exception' field.
   * @return Exception caught during call execution
   */
  public java.lang.CharSequence getException() {
    return exception;
  }


  /**
   * Sets the value of the 'exception' field.
   * Exception caught during call execution
   * @param value the value to set.
   */
  public void setException(java.lang.CharSequence value) {
    this.exception = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return Description of the failure
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * Description of the failure
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'object' field.
   * @return Classname of the original event
   */
  public java.lang.CharSequence getObject() {
    return object;
  }


  /**
   * Sets the value of the 'object' field.
   * Classname of the original event
   * @param value the value to set.
   */
  public void setObject(java.lang.CharSequence value) {
    this.object = value;
  }

  /**
   * Gets the value of the 'content' field.
   * @return Stringified content of original event
   */
  public java.lang.CharSequence getContent() {
    return content;
  }


  /**
   * Sets the value of the 'content' field.
   * Stringified content of original event
   * @param value the value to set.
   */
  public void setContent(java.lang.CharSequence value) {
    this.content = value;
  }

  /**
   * Creates a new RetryableError RecordBuilder.
   * @return A new RetryableError RecordBuilder
   */
  public static com.example.objects.RetryableError.Builder newBuilder() {
    return new com.example.objects.RetryableError.Builder();
  }

  /**
   * Creates a new RetryableError RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RetryableError RecordBuilder
   */
  public static com.example.objects.RetryableError.Builder newBuilder(com.example.objects.RetryableError.Builder other) {
    if (other == null) {
      return new com.example.objects.RetryableError.Builder();
    } else {
      return new com.example.objects.RetryableError.Builder(other);
    }
  }

  /**
   * Creates a new RetryableError RecordBuilder by copying an existing RetryableError instance.
   * @param other The existing instance to copy.
   * @return A new RetryableError RecordBuilder
   */
  public static com.example.objects.RetryableError.Builder newBuilder(com.example.objects.RetryableError other) {
    if (other == null) {
      return new com.example.objects.RetryableError.Builder();
    } else {
      return new com.example.objects.RetryableError.Builder(other);
    }
  }

  /**
   * RecordBuilder for RetryableError instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RetryableError>
    implements org.apache.avro.data.RecordBuilder<RetryableError> {

    /** Exception caught during call execution */
    private java.lang.CharSequence exception;
    /** Description of the failure */
    private java.lang.CharSequence message;
    /** Classname of the original event */
    private java.lang.CharSequence object;
    /** Stringified content of original event */
    private java.lang.CharSequence content;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.objects.RetryableError.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.exception)) {
        this.exception = data().deepCopy(fields()[0].schema(), other.exception);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.object)) {
        this.object = data().deepCopy(fields()[2].schema(), other.object);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.content)) {
        this.content = data().deepCopy(fields()[3].schema(), other.content);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing RetryableError instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.objects.RetryableError other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.exception)) {
        this.exception = data().deepCopy(fields()[0].schema(), other.exception);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.object)) {
        this.object = data().deepCopy(fields()[2].schema(), other.object);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.content)) {
        this.content = data().deepCopy(fields()[3].schema(), other.content);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'exception' field.
      * Exception caught during call execution
      * @return The value.
      */
    public java.lang.CharSequence getException() {
      return exception;
    }


    /**
      * Sets the value of the 'exception' field.
      * Exception caught during call execution
      * @param value The value of 'exception'.
      * @return This builder.
      */
    public com.example.objects.RetryableError.Builder setException(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.exception = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'exception' field has been set.
      * Exception caught during call execution
      * @return True if the 'exception' field has been set, false otherwise.
      */
    public boolean hasException() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'exception' field.
      * Exception caught during call execution
      * @return This builder.
      */
    public com.example.objects.RetryableError.Builder clearException() {
      exception = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * Description of the failure
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * Description of the failure
      * @param value The value of 'message'.
      * @return This builder.
      */
    public com.example.objects.RetryableError.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.message = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * Description of the failure
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'message' field.
      * Description of the failure
      * @return This builder.
      */
    public com.example.objects.RetryableError.Builder clearMessage() {
      message = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'object' field.
      * Classname of the original event
      * @return The value.
      */
    public java.lang.CharSequence getObject() {
      return object;
    }


    /**
      * Sets the value of the 'object' field.
      * Classname of the original event
      * @param value The value of 'object'.
      * @return This builder.
      */
    public com.example.objects.RetryableError.Builder setObject(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.object = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'object' field has been set.
      * Classname of the original event
      * @return True if the 'object' field has been set, false otherwise.
      */
    public boolean hasObject() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'object' field.
      * Classname of the original event
      * @return This builder.
      */
    public com.example.objects.RetryableError.Builder clearObject() {
      object = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'content' field.
      * Stringified content of original event
      * @return The value.
      */
    public java.lang.CharSequence getContent() {
      return content;
    }


    /**
      * Sets the value of the 'content' field.
      * Stringified content of original event
      * @param value The value of 'content'.
      * @return This builder.
      */
    public com.example.objects.RetryableError.Builder setContent(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.content = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'content' field has been set.
      * Stringified content of original event
      * @return True if the 'content' field has been set, false otherwise.
      */
    public boolean hasContent() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'content' field.
      * Stringified content of original event
      * @return This builder.
      */
    public com.example.objects.RetryableError.Builder clearContent() {
      content = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RetryableError build() {
      try {
        RetryableError record = new RetryableError();
        record.exception = fieldSetFlags()[0] ? this.exception : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.message = fieldSetFlags()[1] ? this.message : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.object = fieldSetFlags()[2] ? this.object : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.content = fieldSetFlags()[3] ? this.content : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RetryableError>
    WRITER$ = (org.apache.avro.io.DatumWriter<RetryableError>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RetryableError>
    READER$ = (org.apache.avro.io.DatumReader<RetryableError>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.exception);

    out.writeString(this.message);

    out.writeString(this.object);

    out.writeString(this.content);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.exception = in.readString(this.exception instanceof Utf8 ? (Utf8)this.exception : null);

      this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);

      this.object = in.readString(this.object instanceof Utf8 ? (Utf8)this.object : null);

      this.content = in.readString(this.content instanceof Utf8 ? (Utf8)this.content : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.exception = in.readString(this.exception instanceof Utf8 ? (Utf8)this.exception : null);
          break;

        case 1:
          this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);
          break;

        case 2:
          this.object = in.readString(this.object instanceof Utf8 ? (Utf8)this.object : null);
          break;

        case 3:
          this.content = in.readString(this.content instanceof Utf8 ? (Utf8)this.content : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










